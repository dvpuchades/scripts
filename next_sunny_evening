#! /Library/Frameworks/Python.framework/Versions/3.11/bin/python3

# Using open-meteo.com API

# WMO Weather interpretation codes (WW)
# Code	Description
# 0	Clear sky
# 1, 2, 3	Mainly clear, partly cloudy, and overcast
# 45, 48	Fog and depositing rime fog
# 51, 53, 55	Drizzle: Light, moderate, and dense intensity
# 56, 57	Freezing Drizzle: Light and dense intensity
# 61, 63, 65	Rain: Slight, moderate and heavy intensity
# 66, 67	Freezing Rain: Light and heavy intensity
# 71, 73, 75	Snow fall: Slight, moderate, and heavy intensity
# 77	Snow grains
# 80, 81, 82	Rain showers: Slight, moderate, and violent
# 85, 86	Snow showers slight and heavy
# 95 *	Thunderstorm: Slight or moderate
# 96, 99 *	Thunderstorm with slight and heavy hail

import requests
from datetime import datetime, date

def get_weather():
  # gets weather data from open-meteo.com for Cork, Ireland
  url = "https://api.open-meteo.com/v1/forecast?latitude=51.898&longitude=-8.4706&hourly=weathercode,temperature_80m&timezone=auto&forecast_days=14"
  response = requests.get(url)
  return response.json()

def get_weather_days(weather):
  days = {}
  for index, hour in enumerate(weather['hourly']['time']):
    if 17 < datetime.fromisoformat(hour).hour < 22 :
      day = datetime.fromisoformat(hour).date()
      current = days.get(day)
      weather_code = weather['hourly']['weathercode'][index]
      max_temp = weather['hourly']['temperature_80m'][index]
      min_temp = weather['hourly']['temperature_80m'][index]
      if current is None:
        days[day] = {'date': day, 'weather_code': weather_code, 'max_temp': max_temp, 'min_temp': min_temp}
      else:
        current['weather_code'] = max(current['weather_code'], weather_code)
        current['max_temp'] = max(current['max_temp'], max_temp)
        current['min_temp'] = min(current['min_temp'], min_temp)
  return days

def get_next_sunny_day(days):
  for day in days.keys():
    if int(days[day]['weather_code']) <= 3:
      return day
  return None

def date_to_string(date):
  return date.strftime('%a %d %b')

if __name__ == "__main__":
  weather = get_weather()
  days = get_weather_days(weather)
  next_sunny_day = get_next_sunny_day(days)
  print(date_to_string(next_sunny_day)
        + ", " + str((days[next_sunny_day]['date'] - date.today()).days) + " day(s) remaining. "
        + str(days[next_sunny_day]['max_temp']) + "°C max, " + str(days[next_sunny_day]['min_temp']) + "°C min")